// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file depot/build/v1/registry.proto (package depot.build.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, proto3, protoInt64, Timestamp} from '@bufbuild/protobuf'

/**
 * @generated from message depot.build.v1.ListImagesRequest
 */
export class ListImagesRequest extends Message<ListImagesRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * The maximum number of results to return per page
   *
   * @generated from field: optional int32 page_size = 2;
   */
  pageSize?: number

  /**
   * The page token indicating which page of results to return
   *
   * @generated from field: optional string page_token = 3;
   */
  pageToken?: string

  constructor(data?: PartialMessage<ListImagesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.build.v1.ListImagesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'page_size', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true},
    {no: 3, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListImagesRequest {
    return new ListImagesRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListImagesRequest {
    return new ListImagesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListImagesRequest {
    return new ListImagesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListImagesRequest | PlainMessage<ListImagesRequest> | undefined,
    b: ListImagesRequest | PlainMessage<ListImagesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListImagesRequest, a, b)
  }
}

/**
 * @generated from message depot.build.v1.Image
 */
export class Image extends Message<Image> {
  /**
   * @generated from field: string tag = 1;
   */
  tag = ''

  /**
   * @generated from field: string digest = 2;
   */
  digest = ''

  /**
   * @generated from field: google.protobuf.Timestamp pushed_at = 3;
   */
  pushedAt?: Timestamp

  /**
   * @generated from field: uint64 size_bytes = 4;
   */
  sizeBytes = protoInt64.zero

  constructor(data?: PartialMessage<Image>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.build.v1.Image'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'tag', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'digest', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'pushed_at', kind: 'message', T: Timestamp},
    {no: 4, name: 'size_bytes', kind: 'scalar', T: 4 /* ScalarType.UINT64 */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Image {
    return new Image().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJsonString(jsonString, options)
  }

  static equals(a: Image | PlainMessage<Image> | undefined, b: Image | PlainMessage<Image> | undefined): boolean {
    return proto3.util.equals(Image, a, b)
  }
}

/**
 * @generated from message depot.build.v1.ListImagesResponse
 */
export class ListImagesResponse extends Message<ListImagesResponse> {
  /**
   * @generated from field: repeated depot.build.v1.Image images = 1;
   */
  images: Image[] = []

  /**
   * The next page token, if there are more results
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string

  constructor(data?: PartialMessage<ListImagesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.build.v1.ListImagesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'images', kind: 'message', T: Image, repeated: true},
    {no: 2, name: 'next_page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListImagesResponse {
    return new ListImagesResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListImagesResponse {
    return new ListImagesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListImagesResponse {
    return new ListImagesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListImagesResponse | PlainMessage<ListImagesResponse> | undefined,
    b: ListImagesResponse | PlainMessage<ListImagesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListImagesResponse, a, b)
  }
}

/**
 * @generated from message depot.build.v1.DeleteImageRequest
 */
export class DeleteImageRequest extends Message<DeleteImageRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: repeated string image_tags = 2;
   */
  imageTags: string[] = []

  constructor(data?: PartialMessage<DeleteImageRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.build.v1.DeleteImageRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'image_tags', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteImageRequest {
    return new DeleteImageRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteImageRequest {
    return new DeleteImageRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteImageRequest {
    return new DeleteImageRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteImageRequest | PlainMessage<DeleteImageRequest> | undefined,
    b: DeleteImageRequest | PlainMessage<DeleteImageRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteImageRequest, a, b)
  }
}

/**
 * @generated from message depot.build.v1.DeleteImageResponse
 */
export class DeleteImageResponse extends Message<DeleteImageResponse> {
  constructor(data?: PartialMessage<DeleteImageResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.build.v1.DeleteImageResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteImageResponse {
    return new DeleteImageResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteImageResponse {
    return new DeleteImageResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteImageResponse {
    return new DeleteImageResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteImageResponse | PlainMessage<DeleteImageResponse> | undefined,
    b: DeleteImageResponse | PlainMessage<DeleteImageResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteImageResponse, a, b)
  }
}
