// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file depot/buildkit/v1/buildkit.proto (package depot.buildkit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, proto3} from '@bufbuild/protobuf'

/**
 * @generated from enum depot.buildkit.v1.Platform
 */
export enum Platform {
  /**
   * @generated from enum value: PLATFORM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PLATFORM_AMD64 = 1;
   */
  AMD64 = 1,

  /**
   * @generated from enum value: PLATFORM_ARM64 = 2;
   */
  ARM64 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Platform)
proto3.util.setEnumType(Platform, 'depot.buildkit.v1.Platform', [
  {no: 0, name: 'PLATFORM_UNSPECIFIED'},
  {no: 1, name: 'PLATFORM_AMD64'},
  {no: 2, name: 'PLATFORM_ARM64'},
])

/**
 * @generated from message depot.buildkit.v1.GetEndpointRequest
 */
export class GetEndpointRequest extends Message<GetEndpointRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = ''

  /**
   * @generated from field: depot.buildkit.v1.Platform platform = 2;
   */
  platform = Platform.UNSPECIFIED

  constructor(data?: PartialMessage<GetEndpointRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.GetEndpointRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'build_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'platform', kind: 'enum', T: proto3.getEnumType(Platform)},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEndpointRequest {
    return new GetEndpointRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEndpointRequest {
    return new GetEndpointRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEndpointRequest {
    return new GetEndpointRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetEndpointRequest | PlainMessage<GetEndpointRequest> | undefined,
    b: GetEndpointRequest | PlainMessage<GetEndpointRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetEndpointRequest, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.GetEndpointResponse
 */
export class GetEndpointResponse extends Message<GetEndpointResponse> {
  /**
   * @generated from oneof depot.buildkit.v1.GetEndpointResponse.connection
   */
  connection:
    | {
        /**
         * @generated from field: depot.buildkit.v1.GetEndpointResponse.PendingConnection pending = 1;
         */
        value: GetEndpointResponse_PendingConnection
        case: 'pending'
      }
    | {
        /**
         * @generated from field: depot.buildkit.v1.GetEndpointResponse.ActiveConnection active = 2;
         */
        value: GetEndpointResponse_ActiveConnection
        case: 'active'
      }
    | {case: undefined; value?: undefined} = {case: undefined}

  constructor(data?: PartialMessage<GetEndpointResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.GetEndpointResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'pending', kind: 'message', T: GetEndpointResponse_PendingConnection, oneof: 'connection'},
    {no: 2, name: 'active', kind: 'message', T: GetEndpointResponse_ActiveConnection, oneof: 'connection'},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEndpointResponse {
    return new GetEndpointResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEndpointResponse {
    return new GetEndpointResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEndpointResponse {
    return new GetEndpointResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetEndpointResponse | PlainMessage<GetEndpointResponse> | undefined,
    b: GetEndpointResponse | PlainMessage<GetEndpointResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetEndpointResponse, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.GetEndpointResponse.PendingConnection
 */
export class GetEndpointResponse_PendingConnection extends Message<GetEndpointResponse_PendingConnection> {
  constructor(data?: PartialMessage<GetEndpointResponse_PendingConnection>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.GetEndpointResponse.PendingConnection'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEndpointResponse_PendingConnection {
    return new GetEndpointResponse_PendingConnection().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEndpointResponse_PendingConnection {
    return new GetEndpointResponse_PendingConnection().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEndpointResponse_PendingConnection {
    return new GetEndpointResponse_PendingConnection().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetEndpointResponse_PendingConnection | PlainMessage<GetEndpointResponse_PendingConnection> | undefined,
    b: GetEndpointResponse_PendingConnection | PlainMessage<GetEndpointResponse_PendingConnection> | undefined,
  ): boolean {
    return proto3.util.equals(GetEndpointResponse_PendingConnection, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.GetEndpointResponse.ActiveConnection
 */
export class GetEndpointResponse_ActiveConnection extends Message<GetEndpointResponse_ActiveConnection> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = ''

  /**
   * @generated from field: string server_name = 2;
   */
  serverName = ''

  /**
   * @generated from field: depot.buildkit.v1.CertificatePair cert = 3;
   */
  cert?: CertificatePair

  /**
   * @generated from field: depot.buildkit.v1.PublicCertificate ca_cert = 4;
   */
  caCert?: PublicCertificate

  constructor(data?: PartialMessage<GetEndpointResponse_ActiveConnection>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.GetEndpointResponse.ActiveConnection'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'endpoint', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'server_name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'cert', kind: 'message', T: CertificatePair},
    {no: 4, name: 'ca_cert', kind: 'message', T: PublicCertificate},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEndpointResponse_ActiveConnection {
    return new GetEndpointResponse_ActiveConnection().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEndpointResponse_ActiveConnection {
    return new GetEndpointResponse_ActiveConnection().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEndpointResponse_ActiveConnection {
    return new GetEndpointResponse_ActiveConnection().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetEndpointResponse_ActiveConnection | PlainMessage<GetEndpointResponse_ActiveConnection> | undefined,
    b: GetEndpointResponse_ActiveConnection | PlainMessage<GetEndpointResponse_ActiveConnection> | undefined,
  ): boolean {
    return proto3.util.equals(GetEndpointResponse_ActiveConnection, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.ReleaseEndpointRequest
 */
export class ReleaseEndpointRequest extends Message<ReleaseEndpointRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = ''

  /**
   * @generated from field: depot.buildkit.v1.Platform platform = 2;
   */
  platform = Platform.UNSPECIFIED

  constructor(data?: PartialMessage<ReleaseEndpointRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.ReleaseEndpointRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'build_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'platform', kind: 'enum', T: proto3.getEnumType(Platform)},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseEndpointRequest {
    return new ReleaseEndpointRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseEndpointRequest {
    return new ReleaseEndpointRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseEndpointRequest {
    return new ReleaseEndpointRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ReleaseEndpointRequest | PlainMessage<ReleaseEndpointRequest> | undefined,
    b: ReleaseEndpointRequest | PlainMessage<ReleaseEndpointRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ReleaseEndpointRequest, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.ReleaseEndpointResponse
 */
export class ReleaseEndpointResponse extends Message<ReleaseEndpointResponse> {
  constructor(data?: PartialMessage<ReleaseEndpointResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.ReleaseEndpointResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseEndpointResponse {
    return new ReleaseEndpointResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseEndpointResponse {
    return new ReleaseEndpointResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseEndpointResponse {
    return new ReleaseEndpointResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ReleaseEndpointResponse | PlainMessage<ReleaseEndpointResponse> | undefined,
    b: ReleaseEndpointResponse | PlainMessage<ReleaseEndpointResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ReleaseEndpointResponse, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.PublicCertificate
 */
export class PublicCertificate extends Message<PublicCertificate> {
  /**
   * @generated from field: string cert = 1;
   */
  cert = ''

  constructor(data?: PartialMessage<PublicCertificate>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.PublicCertificate'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'cert', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicCertificate {
    return new PublicCertificate().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicCertificate {
    return new PublicCertificate().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicCertificate {
    return new PublicCertificate().fromJsonString(jsonString, options)
  }

  static equals(
    a: PublicCertificate | PlainMessage<PublicCertificate> | undefined,
    b: PublicCertificate | PlainMessage<PublicCertificate> | undefined,
  ): boolean {
    return proto3.util.equals(PublicCertificate, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.PrivateKey
 */
export class PrivateKey extends Message<PrivateKey> {
  /**
   * @generated from field: string key = 1;
   */
  key = ''

  constructor(data?: PartialMessage<PrivateKey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.PrivateKey'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivateKey {
    return new PrivateKey().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivateKey {
    return new PrivateKey().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivateKey {
    return new PrivateKey().fromJsonString(jsonString, options)
  }

  static equals(
    a: PrivateKey | PlainMessage<PrivateKey> | undefined,
    b: PrivateKey | PlainMessage<PrivateKey> | undefined,
  ): boolean {
    return proto3.util.equals(PrivateKey, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.CertificatePair
 */
export class CertificatePair extends Message<CertificatePair> {
  /**
   * @generated from field: depot.buildkit.v1.PublicCertificate cert = 1;
   */
  cert?: PublicCertificate

  /**
   * @generated from field: depot.buildkit.v1.PrivateKey key = 2;
   */
  key?: PrivateKey

  constructor(data?: PartialMessage<CertificatePair>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.CertificatePair'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'cert', kind: 'message', T: PublicCertificate},
    {no: 2, name: 'key', kind: 'message', T: PrivateKey},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificatePair {
    return new CertificatePair().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificatePair {
    return new CertificatePair().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificatePair {
    return new CertificatePair().fromJsonString(jsonString, options)
  }

  static equals(
    a: CertificatePair | PlainMessage<CertificatePair> | undefined,
    b: CertificatePair | PlainMessage<CertificatePair> | undefined,
  ): boolean {
    return proto3.util.equals(CertificatePair, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.ReportHealthRequest
 */
export class ReportHealthRequest extends Message<ReportHealthRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = ''

  /**
   * @generated from field: depot.buildkit.v1.Platform platform = 2;
   */
  platform = Platform.UNSPECIFIED

  constructor(data?: PartialMessage<ReportHealthRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.ReportHealthRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'build_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'platform', kind: 'enum', T: proto3.getEnumType(Platform)},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportHealthRequest {
    return new ReportHealthRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportHealthRequest {
    return new ReportHealthRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportHealthRequest {
    return new ReportHealthRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ReportHealthRequest | PlainMessage<ReportHealthRequest> | undefined,
    b: ReportHealthRequest | PlainMessage<ReportHealthRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ReportHealthRequest, a, b)
  }
}

/**
 * @generated from message depot.buildkit.v1.ReportHealthResponse
 */
export class ReportHealthResponse extends Message<ReportHealthResponse> {
  constructor(data?: PartialMessage<ReportHealthResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.buildkit.v1.ReportHealthResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportHealthResponse {
    return new ReportHealthResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportHealthResponse {
    return new ReportHealthResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportHealthResponse {
    return new ReportHealthResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ReportHealthResponse | PlainMessage<ReportHealthResponse> | undefined,
    b: ReportHealthResponse | PlainMessage<ReportHealthResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ReportHealthResponse, a, b)
  }
}
