// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file depot/core/v1/project.proto (package depot.core.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, proto3, Timestamp} from '@bufbuild/protobuf'

/**
 * Hardware represents the hardware configuration of a project.
 *
 * @generated from enum depot.core.v1.Hardware
 */
export enum Hardware {
  /**
   * By default is 16 CPU and 32GB of memory.
   *
   * @generated from enum value: HARDWARE_UNSPECIFIED = 0;
   */
  HARDWARE_UNSPECIFIED = 0,

  /**
   * 16 CPU and 32GB of memory.
   *
   * @generated from enum value: HARDWARE_16X32 = 1;
   */
  HARDWARE_16X32 = 1,

  /**
   * 4 CPU and 4GB of memory.
   *
   * @generated from enum value: HARDWARE_4X4 = 2;
   */
  HARDWARE_4X4 = 2,

  /**
   * 8 CPU and 8GB of memory.
   *
   * @generated from enum value: HARDWARE_8X8 = 3;
   */
  HARDWARE_8X8 = 3,

  /**
   * 8 CPU and 16GB of memory.
   *
   * @generated from enum value: HARDWARE_8X16 = 4;
   */
  HARDWARE_8X16 = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Hardware)
proto3.util.setEnumType(Hardware, 'depot.core.v1.Hardware', [
  {no: 0, name: 'HARDWARE_UNSPECIFIED'},
  {no: 1, name: 'HARDWARE_16X32'},
  {no: 2, name: 'HARDWARE_4X4'},
  {no: 3, name: 'HARDWARE_8X8'},
  {no: 4, name: 'HARDWARE_8X16'},
])

/**
 * @generated from message depot.core.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId = ''

  /**
   * @generated from field: string name = 3;
   */
  name = ''

  /**
   * @generated from field: string region_id = 4;
   */
  regionId = ''

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp

  /**
   * @generated from field: depot.core.v1.CachePolicy cache_policy = 6;
   */
  cachePolicy?: CachePolicy

  /**
   * @generated from field: depot.core.v1.Hardware hardware = 7;
   */
  hardware = Hardware.HARDWARE_UNSPECIFIED

  constructor(data?: PartialMessage<Project>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.Project'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'organization_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 4, name: 'region_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 5, name: 'created_at', kind: 'message', T: Timestamp},
    {no: 6, name: 'cache_policy', kind: 'message', T: CachePolicy},
    {no: 7, name: 'hardware', kind: 'enum', T: proto3.getEnumType(Hardware)},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options)
  }

  static equals(
    a: Project | PlainMessage<Project> | undefined,
    b: Project | PlainMessage<Project> | undefined,
  ): boolean {
    return proto3.util.equals(Project, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListProjectsRequest
 */
export class ListProjectsRequest extends Message<ListProjectsRequest> {
  constructor(data?: PartialMessage<ListProjectsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListProjectsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsRequest {
    return new ListProjectsRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsRequest {
    return new ListProjectsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsRequest {
    return new ListProjectsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProjectsRequest | PlainMessage<ListProjectsRequest> | undefined,
    b: ListProjectsRequest | PlainMessage<ListProjectsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListProjectsRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListProjectsResponse
 */
export class ListProjectsResponse extends Message<ListProjectsResponse> {
  /**
   * @generated from field: repeated depot.core.v1.Project projects = 1;
   */
  projects: Project[] = []

  constructor(data?: PartialMessage<ListProjectsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListProjectsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'projects', kind: 'message', T: Project, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsResponse {
    return new ListProjectsResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsResponse {
    return new ListProjectsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsResponse {
    return new ListProjectsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProjectsResponse | PlainMessage<ListProjectsResponse> | undefined,
    b: ListProjectsResponse | PlainMessage<ListProjectsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListProjectsResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined,
    b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetProjectResponse
 */
export class GetProjectResponse extends Message<GetProjectResponse> {
  /**
   * @generated from field: depot.core.v1.Project project = 1;
   */
  project?: Project

  constructor(data?: PartialMessage<GetProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project', kind: 'message', T: Project},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined,
    b: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  /**
   * @generated from field: optional string organization_id = 2;
   */
  organizationId?: string

  /**
   * @generated from field: string region_id = 3;
   */
  regionId = ''

  /**
   * @generated from field: optional depot.core.v1.CachePolicy cache_policy = 4;
   */
  cachePolicy?: CachePolicy

  /**
   * @generated from field: optional depot.core.v1.Hardware hardware = 5;
   */
  hardware?: Hardware

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CreateProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'organization_id', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
    {no: 3, name: 'region_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 4, name: 'cache_policy', kind: 'message', T: CachePolicy, opt: true},
    {no: 5, name: 'hardware', kind: 'enum', T: proto3.getEnumType(Hardware), opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined,
    b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: depot.core.v1.Project project = 1;
   */
  project?: Project

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CreateProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project', kind: 'message', T: Project},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined,
    b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.UpdateProjectRequest
 */
export class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string

  /**
   * @generated from field: optional string region_id = 3;
   */
  regionId?: string

  /**
   * @generated from field: optional depot.core.v1.CachePolicy cache_policy = 4;
   */
  cachePolicy?: CachePolicy

  /**
   * @generated from field: optional depot.core.v1.Hardware hardware = 5;
   */
  hardware?: Hardware

  constructor(data?: PartialMessage<UpdateProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.UpdateProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
    {no: 3, name: 'region_id', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
    {no: 4, name: 'cache_policy', kind: 'message', T: CachePolicy, opt: true},
    {no: 5, name: 'hardware', kind: 'enum', T: proto3.getEnumType(Hardware), opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined,
    b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.UpdateProjectResponse
 */
export class UpdateProjectResponse extends Message<UpdateProjectResponse> {
  /**
   * @generated from field: depot.core.v1.Project project = 1;
   */
  project?: Project

  constructor(data?: PartialMessage<UpdateProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.UpdateProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project', kind: 'message', T: Project},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined,
    b: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.DeleteProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined,
    b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.DeleteProjectResponse
 */
export class DeleteProjectResponse extends Message<DeleteProjectResponse> {
  constructor(data?: PartialMessage<DeleteProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.DeleteProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined,
    b: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ResetProjectRequest
 */
export class ResetProjectRequest extends Message<ResetProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<ResetProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ResetProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetProjectRequest {
    return new ResetProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetProjectRequest {
    return new ResetProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetProjectRequest {
    return new ResetProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ResetProjectRequest | PlainMessage<ResetProjectRequest> | undefined,
    b: ResetProjectRequest | PlainMessage<ResetProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ResetProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ResetProjectResponse
 */
export class ResetProjectResponse extends Message<ResetProjectResponse> {
  constructor(data?: PartialMessage<ResetProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ResetProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetProjectResponse {
    return new ResetProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetProjectResponse {
    return new ResetProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetProjectResponse {
    return new ResetProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ResetProjectResponse | PlainMessage<ResetProjectResponse> | undefined,
    b: ResetProjectResponse | PlainMessage<ResetProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ResetProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CachePolicy
 */
export class CachePolicy extends Message<CachePolicy> {
  /**
   * @generated from field: optional int64 keep_bytes = 1 [deprecated = true];
   * @deprecated
   */
  keepBytes?: bigint

  /**
   * @generated from field: int32 keep_days = 2;
   */
  keepDays = 0

  /**
   * @generated from field: int32 keep_gb = 3;
   */
  keepGb = 0

  constructor(data?: PartialMessage<CachePolicy>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CachePolicy'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'keep_bytes', kind: 'scalar', T: 3 /* ScalarType.INT64 */, opt: true},
    {no: 2, name: 'keep_days', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 3, name: 'keep_gb', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CachePolicy {
    return new CachePolicy().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CachePolicy {
    return new CachePolicy().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CachePolicy {
    return new CachePolicy().fromJsonString(jsonString, options)
  }

  static equals(
    a: CachePolicy | PlainMessage<CachePolicy> | undefined,
    b: CachePolicy | PlainMessage<CachePolicy> | undefined,
  ): boolean {
    return proto3.util.equals(CachePolicy, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListTrustPoliciesRequest
 */
export class ListTrustPoliciesRequest extends Message<ListTrustPoliciesRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<ListTrustPoliciesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListTrustPoliciesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTrustPoliciesRequest {
    return new ListTrustPoliciesRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTrustPoliciesRequest {
    return new ListTrustPoliciesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTrustPoliciesRequest {
    return new ListTrustPoliciesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListTrustPoliciesRequest | PlainMessage<ListTrustPoliciesRequest> | undefined,
    b: ListTrustPoliciesRequest | PlainMessage<ListTrustPoliciesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListTrustPoliciesRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListTrustPoliciesResponse
 */
export class ListTrustPoliciesResponse extends Message<ListTrustPoliciesResponse> {
  /**
   * @generated from field: repeated depot.core.v1.TrustPolicy trust_policies = 1;
   */
  trustPolicies: TrustPolicy[] = []

  constructor(data?: PartialMessage<ListTrustPoliciesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListTrustPoliciesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'trust_policies', kind: 'message', T: TrustPolicy, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTrustPoliciesResponse {
    return new ListTrustPoliciesResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTrustPoliciesResponse {
    return new ListTrustPoliciesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTrustPoliciesResponse {
    return new ListTrustPoliciesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListTrustPoliciesResponse | PlainMessage<ListTrustPoliciesResponse> | undefined,
    b: ListTrustPoliciesResponse | PlainMessage<ListTrustPoliciesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListTrustPoliciesResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.AddTrustPolicyRequest
 */
export class AddTrustPolicyRequest extends Message<AddTrustPolicyRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from oneof depot.core.v1.AddTrustPolicyRequest.provider
   */
  provider:
    | {
        /**
         * @generated from field: depot.core.v1.TrustPolicy.Buildkite buildkite = 2;
         */
        value: TrustPolicy_Buildkite
        case: 'buildkite'
      }
    | {
        /**
         * @generated from field: depot.core.v1.TrustPolicy.CircleCI circleci = 3;
         */
        value: TrustPolicy_CircleCI
        case: 'circleci'
      }
    | {
        /**
         * @generated from field: depot.core.v1.TrustPolicy.GitHub github = 4;
         */
        value: TrustPolicy_GitHub
        case: 'github'
      }
    | {case: undefined; value?: undefined} = {case: undefined}

  constructor(data?: PartialMessage<AddTrustPolicyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.AddTrustPolicyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'buildkite', kind: 'message', T: TrustPolicy_Buildkite, oneof: 'provider'},
    {no: 3, name: 'circleci', kind: 'message', T: TrustPolicy_CircleCI, oneof: 'provider'},
    {no: 4, name: 'github', kind: 'message', T: TrustPolicy_GitHub, oneof: 'provider'},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTrustPolicyRequest {
    return new AddTrustPolicyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTrustPolicyRequest {
    return new AddTrustPolicyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTrustPolicyRequest {
    return new AddTrustPolicyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddTrustPolicyRequest | PlainMessage<AddTrustPolicyRequest> | undefined,
    b: AddTrustPolicyRequest | PlainMessage<AddTrustPolicyRequest> | undefined,
  ): boolean {
    return proto3.util.equals(AddTrustPolicyRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.AddTrustPolicyResponse
 */
export class AddTrustPolicyResponse extends Message<AddTrustPolicyResponse> {
  /**
   * @generated from field: depot.core.v1.TrustPolicy trust_policy = 1;
   */
  trustPolicy?: TrustPolicy

  constructor(data?: PartialMessage<AddTrustPolicyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.AddTrustPolicyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'trust_policy', kind: 'message', T: TrustPolicy},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTrustPolicyResponse {
    return new AddTrustPolicyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTrustPolicyResponse {
    return new AddTrustPolicyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTrustPolicyResponse {
    return new AddTrustPolicyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddTrustPolicyResponse | PlainMessage<AddTrustPolicyResponse> | undefined,
    b: AddTrustPolicyResponse | PlainMessage<AddTrustPolicyResponse> | undefined,
  ): boolean {
    return proto3.util.equals(AddTrustPolicyResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.RemoveTrustPolicyRequest
 */
export class RemoveTrustPolicyRequest extends Message<RemoveTrustPolicyRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: string trust_policy_id = 2;
   */
  trustPolicyId = ''

  constructor(data?: PartialMessage<RemoveTrustPolicyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.RemoveTrustPolicyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'trust_policy_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTrustPolicyRequest {
    return new RemoveTrustPolicyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTrustPolicyRequest {
    return new RemoveTrustPolicyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTrustPolicyRequest {
    return new RemoveTrustPolicyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: RemoveTrustPolicyRequest | PlainMessage<RemoveTrustPolicyRequest> | undefined,
    b: RemoveTrustPolicyRequest | PlainMessage<RemoveTrustPolicyRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RemoveTrustPolicyRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.RemoveTrustPolicyResponse
 */
export class RemoveTrustPolicyResponse extends Message<RemoveTrustPolicyResponse> {
  constructor(data?: PartialMessage<RemoveTrustPolicyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.RemoveTrustPolicyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTrustPolicyResponse {
    return new RemoveTrustPolicyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTrustPolicyResponse {
    return new RemoveTrustPolicyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTrustPolicyResponse {
    return new RemoveTrustPolicyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: RemoveTrustPolicyResponse | PlainMessage<RemoveTrustPolicyResponse> | undefined,
    b: RemoveTrustPolicyResponse | PlainMessage<RemoveTrustPolicyResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RemoveTrustPolicyResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.TrustPolicy
 */
export class TrustPolicy extends Message<TrustPolicy> {
  /**
   * @generated from field: string trust_policy_id = 1;
   */
  trustPolicyId = ''

  /**
   * @generated from oneof depot.core.v1.TrustPolicy.provider
   */
  provider:
    | {
        /**
         * @generated from field: depot.core.v1.TrustPolicy.Buildkite buildkite = 2;
         */
        value: TrustPolicy_Buildkite
        case: 'buildkite'
      }
    | {
        /**
         * @generated from field: depot.core.v1.TrustPolicy.CircleCI circleci = 3;
         */
        value: TrustPolicy_CircleCI
        case: 'circleci'
      }
    | {
        /**
         * @generated from field: depot.core.v1.TrustPolicy.GitHub github = 4;
         */
        value: TrustPolicy_GitHub
        case: 'github'
      }
    | {case: undefined; value?: undefined} = {case: undefined}

  constructor(data?: PartialMessage<TrustPolicy>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.TrustPolicy'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'trust_policy_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'buildkite', kind: 'message', T: TrustPolicy_Buildkite, oneof: 'provider'},
    {no: 3, name: 'circleci', kind: 'message', T: TrustPolicy_CircleCI, oneof: 'provider'},
    {no: 4, name: 'github', kind: 'message', T: TrustPolicy_GitHub, oneof: 'provider'},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrustPolicy {
    return new TrustPolicy().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrustPolicy {
    return new TrustPolicy().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrustPolicy {
    return new TrustPolicy().fromJsonString(jsonString, options)
  }

  static equals(
    a: TrustPolicy | PlainMessage<TrustPolicy> | undefined,
    b: TrustPolicy | PlainMessage<TrustPolicy> | undefined,
  ): boolean {
    return proto3.util.equals(TrustPolicy, a, b)
  }
}

/**
 * @generated from message depot.core.v1.TrustPolicy.GitHub
 */
export class TrustPolicy_GitHub extends Message<TrustPolicy_GitHub> {
  /**
   * The GitHub organization or user name
   *
   * @generated from field: string repository_owner = 1;
   */
  repositoryOwner = ''

  /**
   * @generated from field: string repository = 2;
   */
  repository = ''

  constructor(data?: PartialMessage<TrustPolicy_GitHub>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.TrustPolicy.GitHub'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'repository_owner', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'repository', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrustPolicy_GitHub {
    return new TrustPolicy_GitHub().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrustPolicy_GitHub {
    return new TrustPolicy_GitHub().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrustPolicy_GitHub {
    return new TrustPolicy_GitHub().fromJsonString(jsonString, options)
  }

  static equals(
    a: TrustPolicy_GitHub | PlainMessage<TrustPolicy_GitHub> | undefined,
    b: TrustPolicy_GitHub | PlainMessage<TrustPolicy_GitHub> | undefined,
  ): boolean {
    return proto3.util.equals(TrustPolicy_GitHub, a, b)
  }
}

/**
 * @generated from message depot.core.v1.TrustPolicy.CircleCI
 */
export class TrustPolicy_CircleCI extends Message<TrustPolicy_CircleCI> {
  /**
   * CircleCI organization UUID must be a valid UUID, not the friendly organization ID.
   *
   * @generated from field: string organization_uuid = 1;
   */
  organizationUuid = ''

  /**
   * CircleCI project UUID must be a valid UUID, not the friendly project ID
   *
   * @generated from field: string project_uuid = 2;
   */
  projectUuid = ''

  constructor(data?: PartialMessage<TrustPolicy_CircleCI>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.TrustPolicy.CircleCI'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'organization_uuid', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'project_uuid', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrustPolicy_CircleCI {
    return new TrustPolicy_CircleCI().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrustPolicy_CircleCI {
    return new TrustPolicy_CircleCI().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrustPolicy_CircleCI {
    return new TrustPolicy_CircleCI().fromJsonString(jsonString, options)
  }

  static equals(
    a: TrustPolicy_CircleCI | PlainMessage<TrustPolicy_CircleCI> | undefined,
    b: TrustPolicy_CircleCI | PlainMessage<TrustPolicy_CircleCI> | undefined,
  ): boolean {
    return proto3.util.equals(TrustPolicy_CircleCI, a, b)
  }
}

/**
 * @generated from message depot.core.v1.TrustPolicy.Buildkite
 */
export class TrustPolicy_Buildkite extends Message<TrustPolicy_Buildkite> {
  /**
   * @generated from field: string organization_slug = 1;
   */
  organizationSlug = ''

  /**
   * @generated from field: string pipeline_slug = 2;
   */
  pipelineSlug = ''

  constructor(data?: PartialMessage<TrustPolicy_Buildkite>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.TrustPolicy.Buildkite'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'organization_slug', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'pipeline_slug', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrustPolicy_Buildkite {
    return new TrustPolicy_Buildkite().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrustPolicy_Buildkite {
    return new TrustPolicy_Buildkite().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrustPolicy_Buildkite {
    return new TrustPolicy_Buildkite().fromJsonString(jsonString, options)
  }

  static equals(
    a: TrustPolicy_Buildkite | PlainMessage<TrustPolicy_Buildkite> | undefined,
    b: TrustPolicy_Buildkite | PlainMessage<TrustPolicy_Buildkite> | undefined,
  ): boolean {
    return proto3.util.equals(TrustPolicy_Buildkite, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListTokensRequest
 */
export class ListTokensRequest extends Message<ListTokensRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<ListTokensRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListTokensRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTokensRequest {
    return new ListTokensRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTokensRequest {
    return new ListTokensRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTokensRequest {
    return new ListTokensRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListTokensRequest | PlainMessage<ListTokensRequest> | undefined,
    b: ListTokensRequest | PlainMessage<ListTokensRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListTokensRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListTokensResponse
 */
export class ListTokensResponse extends Message<ListTokensResponse> {
  /**
   * @generated from field: repeated depot.core.v1.ListTokensResponse.Token tokens = 1;
   */
  tokens: ListTokensResponse_Token[] = []

  constructor(data?: PartialMessage<ListTokensResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListTokensResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'tokens', kind: 'message', T: ListTokensResponse_Token, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTokensResponse {
    return new ListTokensResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTokensResponse {
    return new ListTokensResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTokensResponse {
    return new ListTokensResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListTokensResponse | PlainMessage<ListTokensResponse> | undefined,
    b: ListTokensResponse | PlainMessage<ListTokensResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListTokensResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListTokensResponse.Token
 */
export class ListTokensResponse_Token extends Message<ListTokensResponse_Token> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = ''

  /**
   * @generated from field: string description = 2;
   */
  description = ''

  constructor(data?: PartialMessage<ListTokensResponse_Token>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListTokensResponse.Token'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'token_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTokensResponse_Token {
    return new ListTokensResponse_Token().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTokensResponse_Token {
    return new ListTokensResponse_Token().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTokensResponse_Token {
    return new ListTokensResponse_Token().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListTokensResponse_Token | PlainMessage<ListTokensResponse_Token> | undefined,
    b: ListTokensResponse_Token | PlainMessage<ListTokensResponse_Token> | undefined,
  ): boolean {
    return proto3.util.equals(ListTokensResponse_Token, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CreateTokenRequest
 */
export class CreateTokenRequest extends Message<CreateTokenRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: string description = 2;
   */
  description = ''

  constructor(data?: PartialMessage<CreateTokenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CreateTokenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined,
    b: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateTokenRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CreateTokenResponse
 */
export class CreateTokenResponse extends Message<CreateTokenResponse> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = ''

  /**
   * @generated from field: string secret = 2;
   */
  secret = ''

  constructor(data?: PartialMessage<CreateTokenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CreateTokenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'token_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'secret', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined,
    b: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateTokenResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.UpdateTokenRequest
 */
export class UpdateTokenRequest extends Message<UpdateTokenRequest> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = ''

  /**
   * @generated from field: string description = 2;
   */
  description = ''

  constructor(data?: PartialMessage<UpdateTokenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.UpdateTokenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'token_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTokenRequest {
    return new UpdateTokenRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTokenRequest {
    return new UpdateTokenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTokenRequest {
    return new UpdateTokenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateTokenRequest | PlainMessage<UpdateTokenRequest> | undefined,
    b: UpdateTokenRequest | PlainMessage<UpdateTokenRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateTokenRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.UpdateTokenResponse
 */
export class UpdateTokenResponse extends Message<UpdateTokenResponse> {
  constructor(data?: PartialMessage<UpdateTokenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.UpdateTokenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTokenResponse {
    return new UpdateTokenResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTokenResponse {
    return new UpdateTokenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTokenResponse {
    return new UpdateTokenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateTokenResponse | PlainMessage<UpdateTokenResponse> | undefined,
    b: UpdateTokenResponse | PlainMessage<UpdateTokenResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateTokenResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.DeleteTokenRequest
 */
export class DeleteTokenRequest extends Message<DeleteTokenRequest> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = ''

  constructor(data?: PartialMessage<DeleteTokenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.DeleteTokenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'token_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTokenRequest {
    return new DeleteTokenRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTokenRequest {
    return new DeleteTokenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTokenRequest {
    return new DeleteTokenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteTokenRequest | PlainMessage<DeleteTokenRequest> | undefined,
    b: DeleteTokenRequest | PlainMessage<DeleteTokenRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteTokenRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.DeleteTokenResponse
 */
export class DeleteTokenResponse extends Message<DeleteTokenResponse> {
  constructor(data?: PartialMessage<DeleteTokenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.DeleteTokenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTokenResponse {
    return new DeleteTokenResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTokenResponse {
    return new DeleteTokenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTokenResponse {
    return new DeleteTokenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteTokenResponse | PlainMessage<DeleteTokenResponse> | undefined,
    b: DeleteTokenResponse | PlainMessage<DeleteTokenResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteTokenResponse, a, b)
  }
}
