// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file depot/core/v1/project.proto (package depot.core.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, Timestamp, proto3} from '@bufbuild/protobuf'

/**
 * @generated from message depot.core.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId = ''

  /**
   * @generated from field: string name = 3;
   */
  name = ''

  /**
   * @generated from field: string region_id = 4;
   */
  regionId = ''

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp

  /**
   * @generated from field: depot.core.v1.CachePolicy cache_policy = 6;
   */
  cachePolicy?: CachePolicy

  constructor(data?: PartialMessage<Project>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.Project'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'organization_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 4, name: 'region_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 5, name: 'created_at', kind: 'message', T: Timestamp},
    {no: 6, name: 'cache_policy', kind: 'message', T: CachePolicy},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options)
  }

  static equals(
    a: Project | PlainMessage<Project> | undefined,
    b: Project | PlainMessage<Project> | undefined,
  ): boolean {
    return proto3.util.equals(Project, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListProjectsRequest
 */
export class ListProjectsRequest extends Message<ListProjectsRequest> {
  constructor(data?: PartialMessage<ListProjectsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListProjectsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsRequest {
    return new ListProjectsRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsRequest {
    return new ListProjectsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsRequest {
    return new ListProjectsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProjectsRequest | PlainMessage<ListProjectsRequest> | undefined,
    b: ListProjectsRequest | PlainMessage<ListProjectsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListProjectsRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListProjectsResponse
 */
export class ListProjectsResponse extends Message<ListProjectsResponse> {
  /**
   * @generated from field: repeated depot.core.v1.Project projects = 1;
   */
  projects: Project[] = []

  constructor(data?: PartialMessage<ListProjectsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListProjectsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'projects', kind: 'message', T: Project, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsResponse {
    return new ListProjectsResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsResponse {
    return new ListProjectsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsResponse {
    return new ListProjectsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProjectsResponse | PlainMessage<ListProjectsResponse> | undefined,
    b: ListProjectsResponse | PlainMessage<ListProjectsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListProjectsResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined,
    b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetProjectResponse
 */
export class GetProjectResponse extends Message<GetProjectResponse> {
  /**
   * @generated from field: depot.core.v1.Project project = 1;
   */
  project?: Project

  constructor(data?: PartialMessage<GetProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project', kind: 'message', T: Project},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined,
    b: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId = ''

  /**
   * @generated from field: string region_id = 3;
   */
  regionId = ''

  /**
   * @generated from field: optional depot.core.v1.CachePolicy cache_policy = 4;
   */
  cachePolicy?: CachePolicy

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CreateProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'organization_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'region_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 4, name: 'cache_policy', kind: 'message', T: CachePolicy, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined,
    b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: depot.core.v1.Project project = 1;
   */
  project?: Project

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CreateProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project', kind: 'message', T: Project},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined,
    b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.UpdateProjectRequest
 */
export class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string

  /**
   * @generated from field: optional string region_id = 3;
   */
  regionId?: string

  /**
   * @generated from field: optional depot.core.v1.CachePolicy cache_policy = 4;
   */
  cachePolicy?: CachePolicy

  constructor(data?: PartialMessage<UpdateProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.UpdateProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
    {no: 3, name: 'region_id', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
    {no: 4, name: 'cache_policy', kind: 'message', T: CachePolicy, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined,
    b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.UpdateProjectResponse
 */
export class UpdateProjectResponse extends Message<UpdateProjectResponse> {
  /**
   * @generated from field: depot.core.v1.Project project = 1;
   */
  project?: Project

  constructor(data?: PartialMessage<UpdateProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.UpdateProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project', kind: 'message', T: Project},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined,
    b: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.DeleteProjectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined,
    b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.DeleteProjectResponse
 */
export class DeleteProjectResponse extends Message<DeleteProjectResponse> {
  constructor(data?: PartialMessage<DeleteProjectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.DeleteProjectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined,
    b: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteProjectResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.CachePolicy
 */
export class CachePolicy extends Message<CachePolicy> {
  /**
   * @generated from field: int32 keep_bytes = 1;
   */
  keepBytes = 0

  /**
   * @generated from field: int32 keep_days = 2;
   */
  keepDays = 0

  constructor(data?: PartialMessage<CachePolicy>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.CachePolicy'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'keep_bytes', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 2, name: 'keep_days', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CachePolicy {
    return new CachePolicy().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CachePolicy {
    return new CachePolicy().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CachePolicy {
    return new CachePolicy().fromJsonString(jsonString, options)
  }

  static equals(
    a: CachePolicy | PlainMessage<CachePolicy> | undefined,
    b: CachePolicy | PlainMessage<CachePolicy> | undefined,
  ): boolean {
    return proto3.util.equals(CachePolicy, a, b)
  }
}
