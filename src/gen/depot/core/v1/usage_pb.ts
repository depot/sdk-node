// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file depot/core/v1/usage.proto (package depot.core.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, proto3, Timestamp} from '@bufbuild/protobuf'

/**
 * @generated from message depot.core.v1.ListProjectUsageRequest
 */
export class ListProjectUsageRequest extends Message<ListProjectUsageRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp start_at = 1;
   */
  startAt?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 2;
   */
  endAt?: Timestamp

  /**
   * @generated from field: optional int32 page_size = 3;
   */
  pageSize?: number

  /**
   * @generated from field: optional string page_token = 4;
   */
  pageToken?: string

  constructor(data?: PartialMessage<ListProjectUsageRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListProjectUsageRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'start_at', kind: 'message', T: Timestamp},
    {no: 2, name: 'end_at', kind: 'message', T: Timestamp},
    {no: 3, name: 'page_size', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true},
    {no: 4, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectUsageRequest {
    return new ListProjectUsageRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectUsageRequest {
    return new ListProjectUsageRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectUsageRequest {
    return new ListProjectUsageRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProjectUsageRequest | PlainMessage<ListProjectUsageRequest> | undefined,
    b: ListProjectUsageRequest | PlainMessage<ListProjectUsageRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListProjectUsageRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ListProjectUsageResponse
 */
export class ListProjectUsageResponse extends Message<ListProjectUsageResponse> {
  /**
   * @generated from field: repeated depot.core.v1.ProjectUsage usage = 1;
   */
  usage: ProjectUsage[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<ListProjectUsageResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ListProjectUsageResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'usage', kind: 'message', T: ProjectUsage, repeated: true},
    {no: 2, name: 'next_page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectUsageResponse {
    return new ListProjectUsageResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectUsageResponse {
    return new ListProjectUsageResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectUsageResponse {
    return new ListProjectUsageResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProjectUsageResponse | PlainMessage<ListProjectUsageResponse> | undefined,
    b: ListProjectUsageResponse | PlainMessage<ListProjectUsageResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListProjectUsageResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetProjectUsageRequest
 */
export class GetProjectUsageRequest extends Message<GetProjectUsageRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: google.protobuf.Timestamp start_at = 2;
   */
  startAt?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 3;
   */
  endAt?: Timestamp

  constructor(data?: PartialMessage<GetProjectUsageRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetProjectUsageRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'start_at', kind: 'message', T: Timestamp},
    {no: 3, name: 'end_at', kind: 'message', T: Timestamp},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectUsageRequest {
    return new GetProjectUsageRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectUsageRequest {
    return new GetProjectUsageRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectUsageRequest {
    return new GetProjectUsageRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetProjectUsageRequest | PlainMessage<GetProjectUsageRequest> | undefined,
    b: GetProjectUsageRequest | PlainMessage<GetProjectUsageRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetProjectUsageRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetProjectUsageResponse
 */
export class GetProjectUsageResponse extends Message<GetProjectUsageResponse> {
  /**
   * @generated from field: depot.core.v1.ProjectUsage usage = 1;
   */
  usage?: ProjectUsage

  constructor(data?: PartialMessage<GetProjectUsageResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetProjectUsageResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'usage', kind: 'message', T: ProjectUsage},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectUsageResponse {
    return new GetProjectUsageResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectUsageResponse {
    return new GetProjectUsageResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectUsageResponse {
    return new GetProjectUsageResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetProjectUsageResponse | PlainMessage<GetProjectUsageResponse> | undefined,
    b: GetProjectUsageResponse | PlainMessage<GetProjectUsageResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetProjectUsageResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ProjectUsage
 */
export class ProjectUsage extends Message<ProjectUsage> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = ''

  /**
   * @generated from field: int32 build_count = 2;
   */
  buildCount = 0

  /**
   * @generated from field: int32 build_duration_seconds = 3;
   */
  buildDurationSeconds = 0

  /**
   * @generated from field: int32 layer_cache_size_gb = 4;
   */
  layerCacheSizeGb = 0

  constructor(data?: PartialMessage<ProjectUsage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ProjectUsage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'build_count', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 3, name: 'build_duration_seconds', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 4, name: 'layer_cache_size_gb', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectUsage {
    return new ProjectUsage().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectUsage {
    return new ProjectUsage().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectUsage {
    return new ProjectUsage().fromJsonString(jsonString, options)
  }

  static equals(
    a: ProjectUsage | PlainMessage<ProjectUsage> | undefined,
    b: ProjectUsage | PlainMessage<ProjectUsage> | undefined,
  ): boolean {
    return proto3.util.equals(ProjectUsage, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetUsageRequest
 */
export class GetUsageRequest extends Message<GetUsageRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp start_at = 1;
   */
  startAt?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 2;
   */
  endAt?: Timestamp

  constructor(data?: PartialMessage<GetUsageRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetUsageRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'start_at', kind: 'message', T: Timestamp},
    {no: 2, name: 'end_at', kind: 'message', T: Timestamp},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUsageRequest | PlainMessage<GetUsageRequest> | undefined,
    b: GetUsageRequest | PlainMessage<GetUsageRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetUsageRequest, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GetUsageResponse
 */
export class GetUsageResponse extends Message<GetUsageResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp period_start = 1;
   */
  periodStart?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp period_end = 2;
   */
  periodEnd?: Timestamp

  /**
   * @generated from field: repeated depot.core.v1.ContainerBuildUsage container_build = 3;
   */
  containerBuild: ContainerBuildUsage[] = []

  /**
   * @generated from field: repeated depot.core.v1.GithubActionsJobsUsage github_actions_jobs = 4;
   */
  githubActionsJobs: GithubActionsJobsUsage[] = []

  /**
   * @generated from field: repeated depot.core.v1.StorageUsage storage = 5;
   */
  storage: StorageUsage[] = []

  /**
   * @generated from field: repeated depot.core.v1.AgentSandboxUsage agent_sandbox = 6;
   */
  agentSandbox: AgentSandboxUsage[] = []

  constructor(data?: PartialMessage<GetUsageResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GetUsageResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'period_start', kind: 'message', T: Timestamp},
    {no: 2, name: 'period_end', kind: 'message', T: Timestamp},
    {no: 3, name: 'container_build', kind: 'message', T: ContainerBuildUsage, repeated: true},
    {no: 4, name: 'github_actions_jobs', kind: 'message', T: GithubActionsJobsUsage, repeated: true},
    {no: 5, name: 'storage', kind: 'message', T: StorageUsage, repeated: true},
    {no: 6, name: 'agent_sandbox', kind: 'message', T: AgentSandboxUsage, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageResponse {
    return new GetUsageResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageResponse {
    return new GetUsageResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageResponse {
    return new GetUsageResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUsageResponse | PlainMessage<GetUsageResponse> | undefined,
    b: GetUsageResponse | PlainMessage<GetUsageResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetUsageResponse, a, b)
  }
}

/**
 * @generated from message depot.core.v1.ContainerBuildUsage
 */
export class ContainerBuildUsage extends Message<ContainerBuildUsage> {
  /**
   * @generated from field: string project_name = 1;
   */
  projectName = ''

  /**
   * @generated from field: int32 build_count = 2;
   */
  buildCount = 0

  /**
   * @generated from field: float minutes_saved = 3;
   */
  minutesSaved = 0

  /**
   * @generated from field: float minutes_billed = 4;
   */
  minutesBilled = 0

  constructor(data?: PartialMessage<ContainerBuildUsage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.ContainerBuildUsage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'project_name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'build_count', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 3, name: 'minutes_saved', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
    {no: 4, name: 'minutes_billed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerBuildUsage {
    return new ContainerBuildUsage().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerBuildUsage {
    return new ContainerBuildUsage().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerBuildUsage {
    return new ContainerBuildUsage().fromJsonString(jsonString, options)
  }

  static equals(
    a: ContainerBuildUsage | PlainMessage<ContainerBuildUsage> | undefined,
    b: ContainerBuildUsage | PlainMessage<ContainerBuildUsage> | undefined,
  ): boolean {
    return proto3.util.equals(ContainerBuildUsage, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GithubActionsJobsUsage
 */
export class GithubActionsJobsUsage extends Message<GithubActionsJobsUsage> {
  /**
   * @generated from field: string repo = 1;
   */
  repo = ''

  /**
   * @generated from field: depot.core.v1.GithubActionsJobsUsageTotal total = 2;
   */
  total?: GithubActionsJobsUsageTotal

  /**
   * @generated from field: repeated depot.core.v1.GithubActionsJobUsageDetail jobs = 3;
   */
  jobs: GithubActionsJobUsageDetail[] = []

  constructor(data?: PartialMessage<GithubActionsJobsUsage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GithubActionsJobsUsage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'repo', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'total', kind: 'message', T: GithubActionsJobsUsageTotal},
    {no: 3, name: 'jobs', kind: 'message', T: GithubActionsJobUsageDetail, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubActionsJobsUsage {
    return new GithubActionsJobsUsage().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubActionsJobsUsage {
    return new GithubActionsJobsUsage().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubActionsJobsUsage {
    return new GithubActionsJobsUsage().fromJsonString(jsonString, options)
  }

  static equals(
    a: GithubActionsJobsUsage | PlainMessage<GithubActionsJobsUsage> | undefined,
    b: GithubActionsJobsUsage | PlainMessage<GithubActionsJobsUsage> | undefined,
  ): boolean {
    return proto3.util.equals(GithubActionsJobsUsage, a, b)
  }
}

/**
 * GithubActionsJobsUsageTotal is the aggregate of metrics for a given repo
 * over the specified period of time
 *
 * @generated from message depot.core.v1.GithubActionsJobsUsageTotal
 */
export class GithubActionsJobsUsageTotal extends Message<GithubActionsJobsUsageTotal> {
  /**
   * @generated from field: int32 job_count = 1;
   */
  jobCount = 0

  /**
   * @generated from field: float minutes_elapsed = 2;
   */
  minutesElapsed = 0

  /**
   * @generated from field: float minutes_billed = 3;
   */
  minutesBilled = 0

  constructor(data?: PartialMessage<GithubActionsJobsUsageTotal>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GithubActionsJobsUsageTotal'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'job_count', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 2, name: 'minutes_elapsed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
    {no: 3, name: 'minutes_billed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubActionsJobsUsageTotal {
    return new GithubActionsJobsUsageTotal().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubActionsJobsUsageTotal {
    return new GithubActionsJobsUsageTotal().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubActionsJobsUsageTotal {
    return new GithubActionsJobsUsageTotal().fromJsonString(jsonString, options)
  }

  static equals(
    a: GithubActionsJobsUsageTotal | PlainMessage<GithubActionsJobsUsageTotal> | undefined,
    b: GithubActionsJobsUsageTotal | PlainMessage<GithubActionsJobsUsageTotal> | undefined,
  ): boolean {
    return proto3.util.equals(GithubActionsJobsUsageTotal, a, b)
  }
}

/**
 * @generated from message depot.core.v1.GithubActionsJobUsageDetail
 */
export class GithubActionsJobUsageDetail extends Message<GithubActionsJobUsageDetail> {
  /**
   * @generated from field: string workflow = 1;
   */
  workflow = ''

  /**
   * @generated from field: string runner = 2;
   */
  runner = ''

  /**
   * @generated from field: int32 job_count = 3;
   */
  jobCount = 0

  /**
   * @generated from field: float minutes_elapsed = 4;
   */
  minutesElapsed = 0

  /**
   * @generated from field: float minutes_billed = 5;
   */
  minutesBilled = 0

  constructor(data?: PartialMessage<GithubActionsJobUsageDetail>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.GithubActionsJobUsageDetail'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'workflow', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'runner', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'job_count', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 4, name: 'minutes_elapsed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
    {no: 5, name: 'minutes_billed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GithubActionsJobUsageDetail {
    return new GithubActionsJobUsageDetail().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GithubActionsJobUsageDetail {
    return new GithubActionsJobUsageDetail().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GithubActionsJobUsageDetail {
    return new GithubActionsJobUsageDetail().fromJsonString(jsonString, options)
  }

  static equals(
    a: GithubActionsJobUsageDetail | PlainMessage<GithubActionsJobUsageDetail> | undefined,
    b: GithubActionsJobUsageDetail | PlainMessage<GithubActionsJobUsageDetail> | undefined,
  ): boolean {
    return proto3.util.equals(GithubActionsJobUsageDetail, a, b)
  }
}

/**
 * @generated from message depot.core.v1.StorageUsage
 */
export class StorageUsage extends Message<StorageUsage> {
  /**
   * @generated from field: string storage_type = 1;
   */
  storageType = ''

  /**
   * @generated from field: float total_gb = 2;
   */
  totalGb = 0

  constructor(data?: PartialMessage<StorageUsage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.StorageUsage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'storage_type', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'total_gb', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageUsage {
    return new StorageUsage().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageUsage {
    return new StorageUsage().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageUsage {
    return new StorageUsage().fromJsonString(jsonString, options)
  }

  static equals(
    a: StorageUsage | PlainMessage<StorageUsage> | undefined,
    b: StorageUsage | PlainMessage<StorageUsage> | undefined,
  ): boolean {
    return proto3.util.equals(StorageUsage, a, b)
  }
}

/**
 * @generated from message depot.core.v1.AgentSandboxUsage
 */
export class AgentSandboxUsage extends Message<AgentSandboxUsage> {
  /**
   * @generated from field: string agent_type = 1;
   */
  agentType = ''

  /**
   * @generated from field: int32 sandboxes_count = 2;
   */
  sandboxesCount = 0

  /**
   * @generated from field: float minutes_elapsed = 3;
   */
  minutesElapsed = 0

  /**
   * @generated from field: float minutes_billed = 4;
   */
  minutesBilled = 0

  constructor(data?: PartialMessage<AgentSandboxUsage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.core.v1.AgentSandboxUsage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'agent_type', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'sandboxes_count', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 3, name: 'minutes_elapsed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
    {no: 4, name: 'minutes_billed', kind: 'scalar', T: 2 /* ScalarType.FLOAT */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentSandboxUsage {
    return new AgentSandboxUsage().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentSandboxUsage {
    return new AgentSandboxUsage().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentSandboxUsage {
    return new AgentSandboxUsage().fromJsonString(jsonString, options)
  }

  static equals(
    a: AgentSandboxUsage | PlainMessage<AgentSandboxUsage> | undefined,
    b: AgentSandboxUsage | PlainMessage<AgentSandboxUsage> | undefined,
  ): boolean {
    return proto3.util.equals(AgentSandboxUsage, a, b)
  }
}
